{{- range $moduleName, $value := .Values.module }}
{{- $kebabedModuleName := $moduleName | kebabcase }}
{{- if and $value.enable $value.data }}
{{-  $_ := set $.Values "jobID"  (randAlphaNum 5|lower) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $kebabedModuleName }}-deployment--{{ $.Values.environment }}-{{ $.Values.action }}
  namespace: {{ $.Release.Namespace }}
  annotations: 
  {{- if $.Values.argocdDeployer }}
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
  {{- else }}
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight : "3"
  {{- end }}
  labels:
    app.kubernetes.io/instance: {{ $kebabedModuleName }}
    app.kubernetes.io/name: {{ $kebabedModuleName }}
spec:
  backoffLimit: 0
  activeDeadlineSeconds: 3600
  template:
      metadata:
          name: {{ $kebabedModuleName }}-deployment
          labels:
            app.kubernetes.io/instance: {{ $kebabedModuleName }}
            app.kubernetes.io/name: {{ $kebabedModuleName }}
      spec:
       {{- if eq $.Values.authType "IRSA" }}
        serviceAccountName: {{ $.Values.serviceAccount.name }}
      {{- end }}
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: {{ $.Values.nodeAffinity.key }} 
                  operator: In
                  values:
                  - {{ $.Values.nodeAffinity.value }}
        restartPolicy: Never
        initContainers:
          - name: {{ $kebabedModuleName }}
          {{- with $value.image }}
            image: {{ .registry }}{{ .repository }}:{{ .tag }}
          {{- end }}
            command: ["/bin/sh", "-c", "--"]
            args: ["cp -r ./ /deploy"]
            volumeMounts:
              - name: deploy-volume
                mountPath: "/deploy"
            {{- $.Values.podSecurityContext | toYaml | nindent 12 }}
        containers:
          - name: deployer
          {{- with $.Values.deployer.image }}
            image: {{ .registry }}{{ .repository }}:{{ .tag }}
          {{- end }}
            command: ["/bin/bash", "-c", "--"]
            args: [ "/opt/audax/module/run.sh" ]
            resources: 
              limits:
                cpu: 1000m
                memory: 1000Mi
              requests:
                cpu: 100m
                memory: 100Mi                
            ports:
            - name: http-server
              containerPort: {{ $.Values.deployer.httpServer.port }}
            workingDir: /opt/audax/module/{{ $value.fullName }}
            env:
              - name: KEBABED_MODULE_NAME
                value: {{ $kebabedModuleName }}
              - name: AX_DEPLOY_HULK__CHARTS_DIR
                value: /opt/audax/module/common-config/charts
              - name: AX_DEPLOY_GLOBAL__DIR
                value: /opt/audax/module/common-config
              - name: AX_DEPLOY_COMMON__DIR
                value: /opt/audax/module/common-config
              - name: AX_DEPLOY__JWT_SIGN_KEY_PATH
                value: /opt/audax/secrets/jwt.key
              - name: AX_DEPLOY__USERID
                value: TBA
              {{- if  $.Values.proxy.enabled  }}
              - name: http_proxy
                value: {{ $.Values.proxy.http_proxy }}
              - name: https_proxy
                value: {{ $.Values.proxy.https_proxy }}
              - name: no_proxy
                value: {{ $.Values.proxy.no_proxy }}
              {{- end }}
            volumeMounts:
              {{- if eq $.Values.authType "kubeConfig" }}
              - name: kubeconfig
                mountPath: /tmp/kubeconfig.yaml
                subPath: kubeconfig.yaml
              {{- end }}
              - mountPath: "/opt/audax"
                name: deploy-volume
              - mountPath: "/.kube"
                name: kube-volume
              - mountPath: "/.aws"
                name: aws-volume
              - mountPath: "/tmp"
                name: tmp-volume
              - mountPath: "/.cache"
                name: cache-volume
              - mountPath: "/opt/audax/secrets" 
                name: secret-volume
              - name: cm-run-sh
                mountPath: /opt/audax/module/run.sh
                subPath: run.sh
              - name: cm-run-sh
                mountPath: /opt/audax/module/saml2aws.sh
                subPath: saml2aws.sh
              - name: cm-{{ $kebabedModuleName }}-env
                mountPath: /opt/audax/envs/{{ $kebabedModuleName }}.env
                subPath: {{ $kebabedModuleName }}.env
              - name: cm-common-env
                mountPath: /opt/audax/envs/common.env
                subPath: common.env
              - name: cm-common-service-exclusions-env
                mountPath: /opt/audax/envs/common.service-exclusions.env
                subPath: common.service-exclusions.env
              - name: cm-common-environment-env
                mountPath: /opt/audax/envs/common.environment.env
                subPath: common.environment.env
              - name: cm-overrides-env
                mountPath: /opt/audax/envs/overrides.env
                subPath: overrides.env
              - name: cm-commondeploy-env
                mountPath: /opt/audax/envs/common.deploy.env
                subPath: common.deploy.env
              - name: cm-scheduling-yaml
                mountPath: /opt/audax/envs/scheduling.yaml
                subPath: scheduling.yaml
              - name: jwt-key
                mountPath: /opt/audax/secrets/jwt.key
                subPath: jwt.key
              {{- $secretFile := $.Files.Glob (printf "secrets/%s/%s.yaml" $.Values.environment $kebabedModuleName ) }}
              {{- if $secretFile }}
              - name: secret-{{ $kebabedModuleName }}-yaml
                mountPath: /opt/audax/{{ $kebabedModuleName }}/secrets/{{ $.Values.environment }}.yaml
                subPath: {{ $.Values.environment }}.yaml
              {{- end }}
              {{- range $key, $val := index $.Values.moduleConfig $kebabedModuleName }}
              - name: {{ $key }}
                mountPath: /opt/audax/module/{{ $kebabedModuleName }}/config/{{ $val }}
                subPath: {{ base $val }}
              {{- end }}
            {{- $.Values.podSecurityContext | toYaml | nindent 12 }}
        terminationGracePeriodSeconds: 600
        securityContext:
          fsGroup: 10000
          {{- if $.Values.enableSupplementalGroups }}
          {{ $.Values.securityContext | toYaml | nindent 10 }}
          {{- end }}
        volumes:
          - name: deploy-volume
            emptyDir: {}
          - name: kube-volume
            emptyDir: {}
          - name: aws-volume
            emptyDir: {}
          - name: tmp-volume
            emptyDir: {}
          - name: cache-volume
            emptyDir: {}
          - name: secret-volume
            emptyDir: {}
           {{- if eq $.Values.authType "kubeConfig" }}
          - name: kubeconfig
            configMap:
              name: kubeconfig
          {{- end }}
          - name: cm-run-sh
            configMap:
              name: cm-run-sh-{{ $kebabedModuleName }}-{{ $.Values.environment }}-{{ $.Values.action }}
              defaultMode: 0755
          - name: cm-{{ $kebabedModuleName }}-env
            configMap:
              name: cm-{{ $kebabedModuleName }}-env-{{ $.Values.environment }}-{{ $.Values.action }}
          - name: cm-common-env
            configMap:
              name: cm-{{ $kebabedModuleName }}-common-env-{{ $.Values.environment }}-{{ $.Values.action }}
          - name: cm-common-service-exclusions-env
            configMap:
              name: cm-{{ $kebabedModuleName }}-commonservice-exclusions-env-{{ $.Values.environment }}-{{ $.Values.action }}
          - name: cm-common-environment-env
            configMap:
              name: cm-{{ $kebabedModuleName }}-commonenvironment-env-{{ $.Values.environment }}-{{ $.Values.action }}
          - name: cm-overrides-env
            configMap:
              name: cm-{{ $kebabedModuleName }}-overrides-env-{{ $.Values.environment }}-{{ $.Values.action }}
          - name: cm-commondeploy-env
            configMap:
              name: cm-{{ $kebabedModuleName }}-commondeploy-env-{{ $.Values.environment }}-{{ $.Values.action }}
          - name: cm-scheduling-yaml
            configMap:
              name: cm-{{ $kebabedModuleName }}-scheduling-yaml-{{ $.Values.environment }}-{{ $.Values.action }}
          - name: jwt-key
            secret:
              secretName: jwt-key-deployment
              defaultMode: 0554
          {{- $secretFile := $.Files.Glob (printf "secrets/%s/%s.yaml" $.Values.environment $kebabedModuleName ) }}
          {{- if $secretFile }}
          - name: secret-{{ $kebabedModuleName }}-yaml
            secret:
              secretName: secret-{{ $kebabedModuleName }}-yaml-{{ $.Values.environment }}-{{ $.Values.action }}
              defaultMode: 0554
          {{- end }}
          {{- range $key, $val := index $.Values.moduleConfig $kebabedModuleName }}
          - name: {{ $key }}
            configMap:
              name: {{ $key }}
          {{- end }}
---
{{- end }}
{{- end }}
